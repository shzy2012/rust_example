
/*
整数型简称整型，按照比特位长度和有无符号分为一下种类：
--------------------
位长度	 有符号	 无符号
8-bit	i8	   u8
16-bit	i16	   u16
32-bit	i32	   u32
64-bit	i64	   u64
128-bit	i128   u128
arch	isize  usize

isize 和 usize 两种整数类型是用来衡量数据大小的，它们的位长度取决于所运行的目标平台，如果是 32 位架构的处理器将使用 32 位位长度整型

整数的表述方法有以下几种：
-----------------
进制	 例
十进制	 98_222
十六进制  0xff
八进制   0o77
二进制	 0b1111_0000
字节(只能表示 u8 型)	b'A'


浮点数型（floating-point）
Rust默认情况f64
let x = 2.0; // f64
let y: f32 = 3.0; // f32

布尔型用 bool 表示，值只能为 true 或 false

字符型用 char 表示,大小为4个字节,代表Unicode标量值

复合类型
元组用一对()包括的一组数据，可以包含不同种类的数据：
    let tup: (i32, f64, u8) = (500, 6.4, 1);
    let (x, y, z) = tup;
*/ 

fn main(){
   let tup:(i32,i64,f32,f64,u8,u32) =(1,12,2.6,2.6,1,32);
   println!("{:?}",tup)
}  